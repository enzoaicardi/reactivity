"use strict";class t{static t=Symbol();static i=Symbol();static o=Symbol()}class s{value;dependencies=new Set;static[t.t]=null;static[t.i]=null;constructor(t,s){this.value=t,s&&this.add(...s)}call(...i){s[t.i]=s[t.t],s[t.t]=null;const o=this.value(...i);return s[t.t]=s[t.i],o}bind(...i){s[t.i]=s[t.t],s[t.t]=this;const o=this.value(...i);return s[t.t]=s[t.i],o}add(...t){for(const s of t)this.dependencies.add(s),s.dependencies.add(this)}delete(...t){for(const s of t)this.dependencies.delete(s),s.dependencies.delete(this)}clear(){for(const t of this.dependencies)t.dependencies.delete(this);this.dependencies.clear()}}exports.Reactive=s,exports.Signal=class{value;dependencies=new Set;constructor(t,s){void 0!==t&&(this.value=t),s&&this.add(...s)}get(){const i=s[t.t];return i&&this.add(i),this.value}set(t){if(this.value!==t){this.value=t;for(const t of this.dependencies)t.call()}return this.value}compute(t){const s=t(this.value);this.set(s)}add(...t){for(const s of t)this.dependencies.add(s),s.dependencies.add(this)}delete(...t){for(const s of t)this.dependencies.delete(s),s.dependencies.delete(this)}clear(){for(const t of this.dependencies)t.dependencies.delete(this);this.dependencies.clear()}};
