class t{value;t;i;static h=null;static o=null;static use=(s,...e)=>new t(s).use(...e);constructor(t){this.value=t,this.t=new Set,this.i=!1}add(t){this.t.add(t),t.t.add(this)}use(...s){t.o=t.h,t.h=this.i?null:this,this.i||(this.i=!0);const e=this.value(...s);return t.h=t.o,e}delete(t){if(t)this.t.delete(t),t.t.delete(this);else{for(const t of this.t)t.t.delete(this);this.t.clear()}}}class s{value;t;constructor(t){void 0!==t&&(this.value=t),this.t=new Set}get(){const s=t.h;return s&&(this.t.add(s),s.t.add(this)),this.value}set(t){if(this.value!==t){this.value=t;for(const t of this.t)t.use()}return this.value}delete(t){if(t)this.t.delete(t),t.t.delete(this);else{for(const t of this.t)t.t.delete(this);this.t.clear()}}}class e extends s{l;u;entry;constructor(s){super(),this.l=s,this.u=new t((()=>this.set(this.entry))),this.u.use()}set(t){return this.entry=t,t=this.l(t),super.set(t)}delete(t){delete this.entry,!t&&this.u&&(this.u.delete(),delete this.u),super.delete(t)}}export{e as ComputedSignal,t as Reactive,s as Signal};
