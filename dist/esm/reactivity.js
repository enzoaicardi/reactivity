class t{value;t;i;static h=null;static o=null;static use=(s,...i)=>new t(s).use(...i);constructor(t){this.value=t,this.t=new Set,this.i=!1}add(t){this.t.add(t),t.t.add(this)}use(...s){t.o=t.h,t.h=this.i?null:this,this.i||(this.i=!0);const i=this.value(...s);return t.h=t.o,i}delete(t){this.t.delete(t),t.t.delete(this)}clear(){for(const t of this.t)t.t.delete(this);this.t.clear()}}class s{value;t;constructor(t){void 0!==t&&(this.value=t),this.t=new Set}get(){const s=t.h;return s&&(this.t.add(s),s.t.add(this)),this.value}set(t){if(this.value!==t){this.value=t;for(const t of this.t)t.use()}return this.value}delete(t){this.t.delete(t),t.t.delete(this)}clear(){for(const t of this.t)t.t.delete(this);this.t.clear()}}class i extends s{u;l;entry;constructor(s){super(),this.u=s,this.l=new t((()=>this.set(this.entry))),this.l.use()}set(t){return this.entry=t,t=this.u(t),super.set(t)}clear(){delete this.entry,this.l&&this.l.clear(),super.clear()}}export{i as ComputedSignal,t as Reactive,s as Signal};
