class t{static t=Symbol();static i=Symbol();static h=Symbol()}class s{value;dependencies=new Set;static[t.t]=null;static[t.i]=null;constructor(t){this.value=t}call(...i){s[t.i]=s[t.t],s[t.t]=null;const e=this.value(...i);return s[t.t]=s[t.i],e}bind(...i){return s[t.i]=s[t.t],s[t.t]=this,this.value(...i),s[t.t]=s[t.i],this}add(t){return t.dependencies.add(this),this.dependencies.add(t),this}delete(t){return t.dependencies.delete(this),this.dependencies.delete(t)}clear(){for(const t of this.dependencies)t.dependencies.delete(this);this.dependencies.clear()}}class i{value;dependencies=new Set;constructor(t){void 0!==t&&(this.value=t)}get(){const i=s[t.t];return i&&this.add(i),this.value}set(t){if(this.value!==t){this.value=t;for(const t of this.dependencies)t.call()}return this.value}compute(t){const s=t(this.value);return this.set(s)}add(t){return t.dependencies.add(this),this.dependencies.add(t),this}delete(t){return t.dependencies.delete(this),this.dependencies.delete(t)}clear(){for(const t of this.dependencies)t.dependencies.delete(this);this.dependencies.clear()}}export{s as Reactive,i as Signal};
